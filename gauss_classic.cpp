#include <iostream>
#include <math.h>
#include <stdlib.h>
#include <fstream>

using namespace std;

int main() {
    int n, m;
    system("chcp 65001");
    //Создаем массив
    ifstream f("matrix.txt");
    f >> n;
    m = n + 1;                  //Расширенная матрица
    double **A = new double *[n+1]; //Выделяем память под строки
    for (int i = 1; i <= n; i++)
        A[i] = new double[m+1];    //Под столбцы
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            f >> A[i][j];
        }
    }
    f.close();

    //Вывод на экран
    cout << "Матрица A: " << endl;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++)
            cout << A[i][j] << " ";
        cout << endl;
    }
    cout << endl;
                                /*Метод Гаусса*/
/*---------------------------------Прямой ход----------------------------------*/
/*Исключения Гаусса основаны на идее последовательного исключения
   переменных по одной до тех пор, пока не останется только одно уравнение с
    одной переменной в левой части. Затем это уравнение решается относительно
     единственной переменной. Таким образом, систему уравнений приводят к
      треугольной (ступенчатой) форме.                                         */
    double tmp;
    double *x = new double[n+1];
    for (int k = 1; k < n; k++) {
        for (int i = k + 1; i <= n; i++) {
            tmp = A[i][k]/A[k][k];
            for (int j = m; j >= k; j--) //Считаем от последнего эл-та в строке, т.е. базиса
                A[i][j] -= tmp * A[k][j]; //

        }
    }
/*---------------------------------Прямой ход----------------------------------*/

/*Выводим матрицу после прямого хода, чтобы проверить, что она была преведена
     к ступенчатому виду                                                       */
    cout << "Матрица, полученная после прямого хода: " << endl;
/*Так как счет идет с ошибкой вычисления, то для наглядности занулим то,
   что находится ниже главной диагонали                                        */
    for (int i = 1; i <= n; i++)
        for (int j = 1; j <= m; j++)
            if (abs(A[i][j]) < 0.000001) A[i][j] = 0;

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++)
            cout << A[i][j] << " ";
        cout << endl;
    }
    cout << endl;

/*-------------------------------Обратный ход-------------------------------*/
/*    Обратная подстановка предполагает
        подстановку полученного на предыдущем шаге значения
         переменной xn в предыдущие уравнения:                              */

    x[n] = A[n][m]/A[n][n];
    for (int i = n - 1; i >= 1; i--) {
        x[i] = A[i][m];
        for (int j = i + 1; j <= n; j++)
            x[i] -= A[i][j] * x[j];
        x[i] = x[i]/A[i][i];
    }

    for (int i = 1; i <= n; i++)
            if (abs(x[i]) < 0.00000001) x[i] = 0;

/*-------------------------------Обратный ход-------------------------------*/


    //Выводим решения
    cout <<"Ответ:" <<endl;
    for (int i = 1; i <= n; i++)
        cout << x[i] << " ";
    cout << endl;
    //Выводим решения в файл
    ofstream out ("answer.txt");
    for (int i = 1; i <= n; i++)
    {
        out << x[i] << ' ';
    }

    out.close();
    delete[] A;
    return 0;
}